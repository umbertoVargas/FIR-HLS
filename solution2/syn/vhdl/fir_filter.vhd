-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    datain_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    datain_TVALID : IN STD_LOGIC;
    datain_TREADY : OUT STD_LOGIC;
    datain_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    dataout_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dataout_TVALID : OUT STD_LOGIC;
    dataout_TREADY : IN STD_LOGIC;
    dataout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of fir_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_filter,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=131,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=12,HLS_SYN_FF=719,HLS_SYN_LUT=920,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv42_3FFFFFFFE86 : STD_LOGIC_VECTOR (41 downto 0) := "111111111111111111111111111111111010000110";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_FFFF0000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110000000000000000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal shift_reg_left_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_reg_left_V_ce0 : STD_LOGIC;
    signal shift_reg_left_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_left_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_reg_left_V_ce1 : STD_LOGIC;
    signal shift_reg_left_V_we1 : STD_LOGIC;
    signal shift_reg_left_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_right_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_reg_right_V_ce0 : STD_LOGIC;
    signal shift_reg_right_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_right_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_reg_right_V_ce1 : STD_LOGIC;
    signal shift_reg_right_V_we1 : STD_LOGIC;
    signal shift_reg_right_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal datain_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal dataout_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_0403_0_reg_179 : STD_LOGIC_VECTOR (52 downto 0);
    signal i_0_reg_189 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0412_0_reg_200 : STD_LOGIC_VECTOR (52 downto 0);
    signal i_1_reg_210 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln51_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_233 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln98_reg_542 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal acc_left_V_fu_245_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal acc_left_V_reg_467 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln68_1_fu_251_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln51_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_477_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_477_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_260_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_481 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln58_1_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_1_reg_491 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln700_fu_284_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln700_reg_501 : STD_LOGIC_VECTOR (47 downto 0);
    signal acc_left_V_2_fu_293_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal datain_last_V_val_reg_511 : STD_LOGIC_VECTOR (0 downto 0);
    signal datain_left_V_2_fu_313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal datain_left_V_2_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_1_fu_324_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal mul_ln700_1_reg_522 : STD_LOGIC_VECTOR (41 downto 0);
    signal acc_right_V_fu_358_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal acc_right_V_reg_532 : STD_LOGIC_VECTOR (41 downto 0);
    signal sext_ln68_3_fu_364_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal icmp_ln98_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_542_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_reg_542_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_373_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_546 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln99_1_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_1_reg_556 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln700_2_fu_397_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln700_2_reg_566 : STD_LOGIC_VECTOR (47 downto 0);
    signal acc_right_V_2_fu_406_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal datain_last_V_val8_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal datain_right_V_2_fu_426_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal datain_right_V_2_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_3_fu_437_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal mul_ln700_3_reg_587 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_193_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_1_phi_fu_214_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln58_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal acc_left_V_fu_245_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln700_2_fu_276_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_fu_284_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln700_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln700_4_fu_290_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_2_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal datain_left_V_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_1_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln51_fu_330_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln700_1_fu_334_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal acc_left_V_1_fu_337_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal acc_right_V_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln700_7_fu_389_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_2_fu_397_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln700_2_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln700_9_fu_403_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_3_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal datain_right_V_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_3_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln98_fu_443_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln700_6_fu_447_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal acc_right_V_1_fu_450_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal regslice_both_dataout_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_datain_data_V_U_apdone_blk : STD_LOGIC;
    signal datain_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal datain_TVALID_int : STD_LOGIC;
    signal datain_TREADY_int : STD_LOGIC;
    signal regslice_both_datain_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_datain_last_V_U_apdone_blk : STD_LOGIC;
    signal datain_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_datain_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_datain_last_V_U_ack_in : STD_LOGIC;
    signal dataout_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal dataout_TVALID_int : STD_LOGIC;
    signal dataout_TREADY_int : STD_LOGIC;
    signal regslice_both_dataout_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dataout_last_V_U_apdone_blk : STD_LOGIC;
    signal dataout_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_dataout_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dataout_last_V_U_vld_out : STD_LOGIC;

    component fir_filter_shift_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_filter_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    shift_reg_left_V_U : component fir_filter_shift_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 58,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => shift_reg_left_V_address0,
        ce0 => shift_reg_left_V_ce0,
        q0 => shift_reg_left_V_q0,
        address1 => shift_reg_left_V_address1,
        ce1 => shift_reg_left_V_ce1,
        we1 => shift_reg_left_V_we1,
        d1 => shift_reg_left_V_d1);

    c_U : component fir_filter_c
    generic map (
        DataWidth => 16,
        AddressRange => 59,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_address0,
        ce0 => c_ce0,
        q0 => c_q0);

    shift_reg_right_V_U : component fir_filter_shift_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 58,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => shift_reg_right_V_address0,
        ce0 => shift_reg_right_V_ce0,
        q0 => shift_reg_right_V_q0,
        address1 => shift_reg_right_V_address1,
        ce1 => shift_reg_right_V_ce1,
        we1 => shift_reg_right_V_we1,
        d1 => shift_reg_right_V_d1);

    regslice_both_datain_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => datain_TDATA,
        vld_in => datain_TVALID,
        ack_in => regslice_both_datain_data_V_U_ack_in,
        data_out => datain_TDATA_int,
        vld_out => datain_TVALID_int,
        ack_out => datain_TREADY_int,
        apdone_blk => regslice_both_datain_data_V_U_apdone_blk);

    regslice_both_datain_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => datain_TLAST,
        vld_in => datain_TVALID,
        ack_in => regslice_both_datain_last_V_U_ack_in,
        data_out => datain_TLAST_int,
        vld_out => regslice_both_datain_last_V_U_vld_out,
        ack_out => datain_TREADY_int,
        apdone_blk => regslice_both_datain_last_V_U_apdone_blk);

    regslice_both_dataout_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dataout_TDATA_int,
        vld_in => dataout_TVALID_int,
        ack_in => dataout_TREADY_int,
        data_out => dataout_TDATA,
        vld_out => regslice_both_dataout_data_V_U_vld_out,
        ack_out => dataout_TREADY,
        apdone_blk => regslice_both_dataout_data_V_U_apdone_blk);

    regslice_both_dataout_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dataout_TLAST_int,
        vld_in => dataout_TVALID_int,
        ack_in => regslice_both_dataout_last_V_U_ack_in_dummy,
        data_out => dataout_TLAST,
        vld_out => regslice_both_dataout_last_V_U_vld_out,
        ack_out => dataout_TREADY,
        apdone_blk => regslice_both_dataout_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln51_reg_477 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_189 <= i_reg_481;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_189 <= ap_const_lv6_39;
            end if; 
        end if;
    end process;

    i_1_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln98_reg_542 = ap_const_lv1_0))) then 
                i_1_reg_210 <= i_2_reg_546;
            elsif (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_1_reg_210 <= ap_const_lv6_39;
            end if; 
        end if;
    end process;

    p_0403_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln51_reg_477_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_0403_0_reg_179 <= acc_left_V_2_fu_293_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_0403_0_reg_179 <= sext_ln68_1_fu_251_p1;
            end if; 
        end if;
    end process;

    p_0412_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln98_reg_542_pp1_iter2_reg = ap_const_lv1_0))) then 
                p_0412_0_reg_200 <= acc_right_V_2_fu_406_p2;
            elsif (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                p_0412_0_reg_200 <= sext_ln68_3_fu_364_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    acc_left_V_reg_467(41 downto 1) <= acc_left_V_fu_245_p2(41 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                acc_right_V_reg_532 <= acc_right_V_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((datain_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                datain_last_V_val8_reg_576 <= datain_TLAST_int;
                datain_right_V_2_reg_581 <= datain_right_V_2_fu_426_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((datain_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                datain_last_V_val_reg_511 <= datain_TLAST_int;
                datain_left_V_2_reg_516 <= datain_left_V_2_fu_313_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln98_fu_367_p2 = ap_const_lv1_0))) then
                i_2_reg_546 <= i_2_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln51_fu_254_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_481 <= i_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln51_reg_477 <= icmp_ln51_fu_254_p2;
                icmp_ln51_reg_477_pp0_iter1_reg <= icmp_ln51_reg_477;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln51_reg_477_pp0_iter2_reg <= icmp_ln51_reg_477_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln98_reg_542 <= icmp_ln98_fu_367_p2;
                icmp_ln98_reg_542_pp1_iter1_reg <= icmp_ln98_reg_542;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln98_reg_542_pp1_iter2_reg <= icmp_ln98_reg_542_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                mul_ln700_1_reg_522 <= mul_ln700_1_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln98_reg_542_pp1_iter1_reg = ap_const_lv1_0))) then
                mul_ln700_2_reg_566 <= mul_ln700_2_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                mul_ln700_3_reg_587 <= mul_ln700_3_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_reg_477_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln700_reg_501 <= mul_ln700_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln51_reg_477 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_229 <= shift_reg_left_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln98_reg_542 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln51_reg_477 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_233 <= c_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln98_reg_542 = ap_const_lv1_0)))) then
                reg_237 <= shift_reg_right_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln51_fu_254_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln58_1_reg_491(5 downto 0) <= zext_ln58_1_fu_271_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln98_fu_367_p2 = ap_const_lv1_0))) then
                    zext_ln99_1_reg_556(5 downto 0) <= zext_ln99_1_fu_384_p1(5 downto 0);
            end if;
        end if;
    end process;
    acc_left_V_reg_467(0) <= '0';
    zext_ln58_1_reg_491(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln99_1_reg_556(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, icmp_ln51_fu_254_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, icmp_ln98_fu_367_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, regslice_both_dataout_data_V_U_apdone_blk, datain_TVALID_int, dataout_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln51_fu_254_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln51_fu_254_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                if (((datain_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln98_fu_367_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln98_fu_367_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                if (((datain_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if ((not(((dataout_TREADY_int = ap_const_logic_0) or (regslice_both_dataout_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    acc_left_V_1_fu_337_p2 <= std_logic_vector(unsigned(trunc_ln51_fu_330_p1) + unsigned(sext_ln700_1_fu_334_p1));
    acc_left_V_2_fu_293_p2 <= std_logic_vector(unsigned(p_0403_0_reg_179) + unsigned(sext_ln700_4_fu_290_p1));
    acc_left_V_fu_245_p0 <= reg_229;
    acc_left_V_fu_245_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(acc_left_V_fu_245_p0) * signed(ap_const_lv42_3FFFFFFFE86))), 42));
    acc_right_V_1_fu_450_p2 <= std_logic_vector(unsigned(trunc_ln98_fu_443_p1) + unsigned(sext_ln700_6_fu_447_p1));
    acc_right_V_2_fu_406_p2 <= std_logic_vector(unsigned(p_0412_0_reg_200) + unsigned(sext_ln700_9_fu_403_p1));
    acc_right_V_fu_358_p1 <= reg_237;
    acc_right_V_fu_358_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv42_3FFFFFFFE86) * signed(acc_right_V_fu_358_p1))), 42));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state12 <= ap_CS_fsm(8);
    ap_CS_fsm_state17 <= ap_CS_fsm(10);
    ap_CS_fsm_state18 <= ap_CS_fsm(11);
    ap_CS_fsm_state19 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(13);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln51_fu_254_p2)
    begin
        if ((icmp_ln51_fu_254_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(icmp_ln98_fu_367_p2)
    begin
        if ((icmp_ln98_fu_367_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_193_p4_assign_proc : process(i_0_reg_189, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln51_reg_477, i_reg_481, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln51_reg_477 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_phi_fu_193_p4 <= i_reg_481;
        else 
            ap_phi_mux_i_0_phi_fu_193_p4 <= i_0_reg_189;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_214_p4_assign_proc : process(i_1_reg_210, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln98_reg_542, i_2_reg_546, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln98_reg_542 = ap_const_lv1_0))) then 
            ap_phi_mux_i_1_phi_fu_214_p4 <= i_2_reg_546;
        else 
            ap_phi_mux_i_1_phi_fu_214_p4 <= i_1_reg_210;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter0, zext_ln58_1_fu_271_p1, ap_enable_reg_pp1_iter0, zext_ln99_1_fu_384_p1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            c_address0 <= zext_ln99_1_fu_384_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c_address0 <= zext_ln58_1_fu_271_p1(6 - 1 downto 0);
        else 
            c_address0 <= "XXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    datain_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state17, datain_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            datain_TDATA_blk_n <= datain_TVALID_int;
        else 
            datain_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    datain_TREADY_assign_proc : process(datain_TVALID, regslice_both_datain_data_V_U_ack_in)
    begin
        if (((regslice_both_datain_data_V_U_ack_in = ap_const_logic_1) and (datain_TVALID = ap_const_logic_1))) then 
            datain_TREADY <= ap_const_logic_1;
        else 
            datain_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    datain_TREADY_int_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state17, datain_TVALID_int)
    begin
        if ((((datain_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((datain_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            datain_TREADY_int <= ap_const_logic_1;
        else 
            datain_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    datain_left_V_2_fu_313_p3 <= 
        datain_left_V_fu_307_p2 when (tmp_2_fu_299_p3(0) = '1') else 
        datain_TDATA_int;
    datain_left_V_fu_307_p2 <= (datain_TDATA_int or ap_const_lv32_FFFF0000);
    datain_right_V_2_fu_426_p3 <= 
        datain_right_V_fu_420_p2 when (tmp_3_fu_412_p3(0) = '1') else 
        datain_TDATA_int;
    datain_right_V_fu_420_p2 <= (datain_TDATA_int or ap_const_lv32_FFFF0000);

    dataout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_CS_fsm_state20, dataout_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            dataout_TDATA_blk_n <= dataout_TREADY_int;
        else 
            dataout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dataout_TDATA_int_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state19, acc_left_V_1_fu_337_p2, acc_right_V_1_fu_450_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dataout_TDATA_int <= acc_right_V_1_fu_450_p2(46 downto 15);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dataout_TDATA_int <= acc_left_V_1_fu_337_p2(46 downto 15);
        else 
            dataout_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dataout_TLAST_int_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state19, datain_last_V_val_reg_511, datain_last_V_val8_reg_576)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dataout_TLAST_int <= datain_last_V_val8_reg_576;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dataout_TLAST_int <= datain_last_V_val_reg_511;
        else 
            dataout_TLAST_int <= "X";
        end if; 
    end process;

    dataout_TVALID <= regslice_both_dataout_data_V_U_vld_out;

    dataout_TVALID_int_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state19, dataout_TREADY_int)
    begin
        if ((((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            dataout_TVALID_int <= ap_const_logic_1;
        else 
            dataout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_373_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_214_p4) + unsigned(ap_const_lv6_3F));
    i_fu_260_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_193_p4) + unsigned(ap_const_lv6_3F));
    icmp_ln51_fu_254_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_193_p4 = ap_const_lv6_0) else "0";
    icmp_ln98_fu_367_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_214_p4 = ap_const_lv6_0) else "0";
    mul_ln700_1_fu_324_p1 <= datain_left_V_2_reg_516;
    mul_ln700_1_fu_324_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv42_3FFFFFFFE86) * signed(mul_ln700_1_fu_324_p1))), 42));
    mul_ln700_2_fu_397_p0 <= reg_233;
    mul_ln700_2_fu_397_p1 <= sext_ln700_7_fu_389_p0;
    mul_ln700_2_fu_397_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_2_fu_397_p0) * signed(mul_ln700_2_fu_397_p1))), 48));
    mul_ln700_3_fu_437_p1 <= datain_right_V_2_reg_581;
    mul_ln700_3_fu_437_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv42_3FFFFFFFE86) * signed(mul_ln700_3_fu_437_p1))), 42));
    mul_ln700_fu_284_p0 <= reg_233;
    mul_ln700_fu_284_p1 <= sext_ln700_2_fu_276_p0;
    mul_ln700_fu_284_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_fu_284_p0) * signed(mul_ln700_fu_284_p1))), 48));
        sext_ln68_1_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_left_V_reg_467),53));

        sext_ln68_3_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_right_V_reg_532),53));

        sext_ln700_1_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln700_1_reg_522),47));

    sext_ln700_2_fu_276_p0 <= reg_229;
        sext_ln700_4_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln700_reg_501),53));

        sext_ln700_6_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln700_3_reg_587),47));

    sext_ln700_7_fu_389_p0 <= reg_237;
        sext_ln700_9_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln700_2_reg_566),53));


    shift_reg_left_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln58_fu_266_p1, ap_CS_fsm_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            shift_reg_left_V_address0 <= zext_ln58_fu_266_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shift_reg_left_V_address0 <= ap_const_lv6_39;
        else 
            shift_reg_left_V_address0 <= "XXXXXX";
        end if; 
    end process;


    shift_reg_left_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state10, zext_ln58_1_reg_491, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            shift_reg_left_V_address1 <= ap_const_lv6_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            shift_reg_left_V_address1 <= zext_ln58_1_reg_491(6 - 1 downto 0);
        else 
            shift_reg_left_V_address1 <= "XXXXXX";
        end if; 
    end process;


    shift_reg_left_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            shift_reg_left_V_ce0 <= ap_const_logic_1;
        else 
            shift_reg_left_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_left_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            shift_reg_left_V_ce1 <= ap_const_logic_1;
        else 
            shift_reg_left_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_left_V_d1_assign_proc : process(shift_reg_left_V_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state10, datain_left_V_2_reg_516, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            shift_reg_left_V_d1 <= datain_left_V_2_reg_516;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            shift_reg_left_V_d1 <= shift_reg_left_V_q0;
        else 
            shift_reg_left_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_left_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln51_reg_477, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln51_reg_477 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            shift_reg_left_V_we1 <= ap_const_logic_1;
        else 
            shift_reg_left_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_right_V_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, zext_ln99_fu_379_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            shift_reg_right_V_address0 <= zext_ln99_fu_379_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            shift_reg_right_V_address0 <= ap_const_lv6_39;
        else 
            shift_reg_right_V_address0 <= "XXXXXX";
        end if; 
    end process;


    shift_reg_right_V_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, zext_ln99_1_reg_556, ap_CS_fsm_state18, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shift_reg_right_V_address1 <= ap_const_lv6_0;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            shift_reg_right_V_address1 <= zext_ln99_1_reg_556(6 - 1 downto 0);
        else 
            shift_reg_right_V_address1 <= "XXXXXX";
        end if; 
    end process;


    shift_reg_right_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, datain_TVALID_int)
    begin
        if ((((datain_TVALID_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            shift_reg_right_V_ce0 <= ap_const_logic_1;
        else 
            shift_reg_right_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_right_V_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            shift_reg_right_V_ce1 <= ap_const_logic_1;
        else 
            shift_reg_right_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_right_V_d1_assign_proc : process(shift_reg_right_V_q0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, datain_right_V_2_reg_581, ap_CS_fsm_state18, ap_block_pp1_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            shift_reg_right_V_d1 <= datain_right_V_2_reg_581;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            shift_reg_right_V_d1 <= shift_reg_right_V_q0;
        else 
            shift_reg_right_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_right_V_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, icmp_ln98_reg_542, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln98_reg_542 = ap_const_lv1_0)))) then 
            shift_reg_right_V_we1 <= ap_const_logic_1;
        else 
            shift_reg_right_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_299_p3 <= datain_TDATA_int(15 downto 15);
    tmp_3_fu_412_p3 <= datain_TDATA_int(15 downto 15);
    trunc_ln51_fu_330_p1 <= p_0403_0_reg_179(47 - 1 downto 0);
    trunc_ln98_fu_443_p1 <= p_0412_0_reg_200(47 - 1 downto 0);
    zext_ln58_1_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_193_p4),64));
    zext_ln58_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_260_p2),64));
    zext_ln99_1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_214_p4),64));
    zext_ln99_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_373_p2),64));
end behav;
