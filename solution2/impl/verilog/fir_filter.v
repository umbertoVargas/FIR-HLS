// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_filter,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=131,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=12,HLS_SYN_FF=719,HLS_SYN_LUT=920,HLS_VERSION=2019_2}" *)

module fir_filter (
        ap_clk,
        ap_rst_n,
        datain_TDATA,
        datain_TVALID,
        datain_TREADY,
        datain_TLAST,
        dataout_TDATA,
        dataout_TVALID,
        dataout_TREADY,
        dataout_TLAST
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_pp0_stage0 = 14'd16;
parameter    ap_ST_fsm_state9 = 14'd32;
parameter    ap_ST_fsm_state10 = 14'd64;
parameter    ap_ST_fsm_state11 = 14'd128;
parameter    ap_ST_fsm_state12 = 14'd256;
parameter    ap_ST_fsm_pp1_stage0 = 14'd512;
parameter    ap_ST_fsm_state17 = 14'd1024;
parameter    ap_ST_fsm_state18 = 14'd2048;
parameter    ap_ST_fsm_state19 = 14'd4096;
parameter    ap_ST_fsm_state20 = 14'd8192;

input   ap_clk;
input   ap_rst_n;
input  [31:0] datain_TDATA;
input   datain_TVALID;
output   datain_TREADY;
input  [0:0] datain_TLAST;
output  [31:0] dataout_TDATA;
output   dataout_TVALID;
input   dataout_TREADY;
output  [0:0] dataout_TLAST;

reg datain_TREADY;

 reg    ap_rst_n_inv;
reg   [5:0] shift_reg_left_V_address0;
reg    shift_reg_left_V_ce0;
wire   [31:0] shift_reg_left_V_q0;
reg   [5:0] shift_reg_left_V_address1;
reg    shift_reg_left_V_ce1;
reg    shift_reg_left_V_we1;
reg   [31:0] shift_reg_left_V_d1;
reg   [5:0] c_address0;
reg    c_ce0;
wire   [15:0] c_q0;
reg   [5:0] shift_reg_right_V_address0;
reg    shift_reg_right_V_ce0;
wire   [31:0] shift_reg_right_V_q0;
reg   [5:0] shift_reg_right_V_address1;
reg    shift_reg_right_V_ce1;
reg    shift_reg_right_V_we1;
reg   [31:0] shift_reg_right_V_d1;
reg    datain_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state17;
reg    dataout_TDATA_blk_n;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
reg   [52:0] p_0403_0_reg_179;
reg   [5:0] i_0_reg_189;
reg   [52:0] p_0412_0_reg_200;
reg   [5:0] i_1_reg_210;
reg   [31:0] reg_229;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln51_reg_477;
reg   [15:0] reg_233;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state14_pp1_stage0_iter1;
wire    ap_block_state15_pp1_stage0_iter2;
wire    ap_block_state16_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln98_reg_542;
reg   [31:0] reg_237;
wire    ap_CS_fsm_state10;
wire   [41:0] acc_left_V_fu_245_p2;
reg   [41:0] acc_left_V_reg_467;
wire    ap_CS_fsm_state3;
wire  signed [52:0] sext_ln68_1_fu_251_p1;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln51_fu_254_p2;
reg   [0:0] icmp_ln51_reg_477_pp0_iter1_reg;
reg   [0:0] icmp_ln51_reg_477_pp0_iter2_reg;
wire   [5:0] i_fu_260_p2;
reg   [5:0] i_reg_481;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln58_1_fu_271_p1;
reg   [63:0] zext_ln58_1_reg_491;
wire   [47:0] mul_ln700_fu_284_p2;
reg   [47:0] mul_ln700_reg_501;
wire   [52:0] acc_left_V_2_fu_293_p2;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] datain_last_V_val_reg_511;
wire  signed [31:0] datain_left_V_2_fu_313_p3;
reg  signed [31:0] datain_left_V_2_reg_516;
wire   [41:0] mul_ln700_1_fu_324_p2;
reg   [41:0] mul_ln700_1_reg_522;
wire   [41:0] acc_right_V_fu_358_p2;
reg   [41:0] acc_right_V_reg_532;
wire  signed [52:0] sext_ln68_3_fu_364_p1;
wire   [0:0] icmp_ln98_fu_367_p2;
reg   [0:0] icmp_ln98_reg_542_pp1_iter1_reg;
reg   [0:0] icmp_ln98_reg_542_pp1_iter2_reg;
wire   [5:0] i_2_fu_373_p2;
reg   [5:0] i_2_reg_546;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln99_1_fu_384_p1;
reg   [63:0] zext_ln99_1_reg_556;
wire   [47:0] mul_ln700_2_fu_397_p2;
reg   [47:0] mul_ln700_2_reg_566;
wire   [52:0] acc_right_V_2_fu_406_p2;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] datain_last_V_val8_reg_576;
wire  signed [31:0] datain_right_V_2_fu_426_p3;
reg  signed [31:0] datain_right_V_2_reg_581;
wire   [41:0] mul_ln700_3_fu_437_p2;
reg   [41:0] mul_ln700_3_reg_587;
wire    ap_CS_fsm_state18;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg    ap_enable_reg_pp1_iter2;
reg   [5:0] ap_phi_mux_i_0_phi_fu_193_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_i_1_phi_fu_214_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln58_fu_266_p1;
wire   [63:0] zext_ln99_fu_379_p1;
wire    ap_CS_fsm_state1;
wire  signed [31:0] acc_left_V_fu_245_p0;
wire  signed [31:0] sext_ln700_2_fu_276_p0;
wire  signed [15:0] mul_ln700_fu_284_p0;
wire  signed [31:0] mul_ln700_fu_284_p1;
wire  signed [52:0] sext_ln700_4_fu_290_p1;
wire   [0:0] tmp_2_fu_299_p3;
wire   [31:0] datain_left_V_fu_307_p2;
wire  signed [31:0] mul_ln700_1_fu_324_p1;
wire   [46:0] trunc_ln51_fu_330_p1;
wire  signed [46:0] sext_ln700_1_fu_334_p1;
wire   [46:0] acc_left_V_1_fu_337_p2;
wire  signed [31:0] acc_right_V_fu_358_p1;
wire  signed [31:0] sext_ln700_7_fu_389_p0;
wire  signed [15:0] mul_ln700_2_fu_397_p0;
wire  signed [31:0] mul_ln700_2_fu_397_p1;
wire  signed [52:0] sext_ln700_9_fu_403_p1;
wire   [0:0] tmp_3_fu_412_p3;
wire   [31:0] datain_right_V_fu_420_p2;
wire  signed [31:0] mul_ln700_3_fu_437_p1;
wire   [46:0] trunc_ln98_fu_443_p1;
wire  signed [46:0] sext_ln700_6_fu_447_p1;
wire   [46:0] acc_right_V_1_fu_450_p2;
reg   [13:0] ap_NS_fsm;
wire    regslice_both_dataout_data_V_U_apdone_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_datain_data_V_U_apdone_blk;
wire   [31:0] datain_TDATA_int;
wire    datain_TVALID_int;
reg    datain_TREADY_int;
wire    regslice_both_datain_data_V_U_ack_in;
wire    regslice_both_datain_last_V_U_apdone_blk;
wire   [0:0] datain_TLAST_int;
wire    regslice_both_datain_last_V_U_vld_out;
wire    regslice_both_datain_last_V_U_ack_in;
reg   [31:0] dataout_TDATA_int;
reg    dataout_TVALID_int;
wire    dataout_TREADY_int;
wire    regslice_both_dataout_data_V_U_vld_out;
wire    regslice_both_dataout_last_V_U_apdone_blk;
reg   [0:0] dataout_TLAST_int;
wire    regslice_both_dataout_last_V_U_ack_in_dummy;
wire    regslice_both_dataout_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

fir_filter_shift_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 58 ),
    .AddressWidth( 6 ))
shift_reg_left_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(shift_reg_left_V_address0),
    .ce0(shift_reg_left_V_ce0),
    .q0(shift_reg_left_V_q0),
    .address1(shift_reg_left_V_address1),
    .ce1(shift_reg_left_V_ce1),
    .we1(shift_reg_left_V_we1),
    .d1(shift_reg_left_V_d1)
);

fir_filter_c #(
    .DataWidth( 16 ),
    .AddressRange( 59 ),
    .AddressWidth( 6 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0)
);

fir_filter_shift_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 58 ),
    .AddressWidth( 6 ))
shift_reg_right_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(shift_reg_right_V_address0),
    .ce0(shift_reg_right_V_ce0),
    .q0(shift_reg_right_V_q0),
    .address1(shift_reg_right_V_address1),
    .ce1(shift_reg_right_V_ce1),
    .we1(shift_reg_right_V_we1),
    .d1(shift_reg_right_V_d1)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_datain_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(datain_TDATA),
    .vld_in(datain_TVALID),
    .ack_in(regslice_both_datain_data_V_U_ack_in),
    .data_out(datain_TDATA_int),
    .vld_out(datain_TVALID_int),
    .ack_out(datain_TREADY_int),
    .apdone_blk(regslice_both_datain_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_datain_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(datain_TLAST),
    .vld_in(datain_TVALID),
    .ack_in(regslice_both_datain_last_V_U_ack_in),
    .data_out(datain_TLAST_int),
    .vld_out(regslice_both_datain_last_V_U_vld_out),
    .ack_out(datain_TREADY_int),
    .apdone_blk(regslice_both_datain_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_dataout_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dataout_TDATA_int),
    .vld_in(dataout_TVALID_int),
    .ack_in(dataout_TREADY_int),
    .data_out(dataout_TDATA),
    .vld_out(regslice_both_dataout_data_V_U_vld_out),
    .ack_out(dataout_TREADY),
    .apdone_blk(regslice_both_dataout_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_dataout_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dataout_TLAST_int),
    .vld_in(dataout_TVALID_int),
    .ack_in(regslice_both_dataout_last_V_U_ack_in_dummy),
    .data_out(dataout_TLAST),
    .vld_out(regslice_both_dataout_last_V_U_vld_out),
    .ack_out(dataout_TREADY),
    .apdone_blk(regslice_both_dataout_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state13)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_477 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_189 <= i_reg_481;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_189 <= 6'd57;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln98_reg_542 == 1'd0))) begin
        i_1_reg_210 <= i_2_reg_546;
    end else if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        i_1_reg_210 <= 6'd57;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln51_reg_477_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_0403_0_reg_179 <= acc_left_V_2_fu_293_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_0403_0_reg_179 <= sext_ln68_1_fu_251_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln98_reg_542_pp1_iter2_reg == 1'd0))) begin
        p_0412_0_reg_200 <= acc_right_V_2_fu_406_p2;
    end else if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        p_0412_0_reg_200 <= sext_ln68_3_fu_364_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_left_V_reg_467[41 : 1] <= acc_left_V_fu_245_p2[41 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        acc_right_V_reg_532 <= acc_right_V_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((datain_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        datain_last_V_val8_reg_576 <= datain_TLAST_int;
        datain_right_V_2_reg_581 <= datain_right_V_2_fu_426_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((datain_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        datain_last_V_val_reg_511 <= datain_TLAST_int;
        datain_left_V_2_reg_516 <= datain_left_V_2_fu_313_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln98_fu_367_p2 == 1'd0))) begin
        i_2_reg_546 <= i_2_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_fu_254_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_481 <= i_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln51_reg_477 <= icmp_ln51_fu_254_p2;
        icmp_ln51_reg_477_pp0_iter1_reg <= icmp_ln51_reg_477;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln51_reg_477_pp0_iter2_reg <= icmp_ln51_reg_477_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln98_reg_542 <= icmp_ln98_fu_367_p2;
        icmp_ln98_reg_542_pp1_iter1_reg <= icmp_ln98_reg_542;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln98_reg_542_pp1_iter2_reg <= icmp_ln98_reg_542_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln700_1_reg_522 <= mul_ln700_1_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln98_reg_542_pp1_iter1_reg == 1'd0))) begin
        mul_ln700_2_reg_566 <= mul_ln700_2_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        mul_ln700_3_reg_587 <= mul_ln700_3_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_reg_477_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln700_reg_501 <= mul_ln700_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_477 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_229 <= shift_reg_left_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln98_reg_542 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_477 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_233 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln98_reg_542 == 1'd0)))) begin
        reg_237 <= shift_reg_right_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_fu_254_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln58_1_reg_491[5 : 0] <= zext_ln58_1_fu_271_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln98_fu_367_p2 == 1'd0))) begin
        zext_ln99_1_reg_556[5 : 0] <= zext_ln99_1_fu_384_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln51_fu_254_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln98_fu_367_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_477 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_193_p4 = i_reg_481;
    end else begin
        ap_phi_mux_i_0_phi_fu_193_p4 = i_0_reg_189;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln98_reg_542 == 1'd0))) begin
        ap_phi_mux_i_1_phi_fu_214_p4 = i_2_reg_546;
    end else begin
        ap_phi_mux_i_1_phi_fu_214_p4 = i_1_reg_210;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        c_address0 = zext_ln99_1_fu_384_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_address0 = zext_ln58_1_fu_271_p1;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        datain_TDATA_blk_n = datain_TVALID_int;
    end else begin
        datain_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_datain_data_V_U_ack_in == 1'b1) & (datain_TVALID == 1'b1))) begin
        datain_TREADY = 1'b1;
    end else begin
        datain_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((datain_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((datain_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        datain_TREADY_int = 1'b1;
    end else begin
        datain_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        dataout_TDATA_blk_n = dataout_TREADY_int;
    end else begin
        dataout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        dataout_TDATA_int = {{acc_right_V_1_fu_450_p2[46:15]}};
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        dataout_TDATA_int = {{acc_left_V_1_fu_337_p2[46:15]}};
    end else begin
        dataout_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        dataout_TLAST_int = datain_last_V_val8_reg_576;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        dataout_TLAST_int = datain_last_V_val_reg_511;
    end else begin
        dataout_TLAST_int = 'bx;
    end
end

always @ (*) begin
    if ((((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        dataout_TVALID_int = 1'b1;
    end else begin
        dataout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_left_V_address0 = zext_ln58_fu_266_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shift_reg_left_V_address0 = 6'd57;
    end else begin
        shift_reg_left_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        shift_reg_left_V_address1 = 6'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_left_V_address1 = zext_ln58_1_reg_491;
    end else begin
        shift_reg_left_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        shift_reg_left_V_ce0 = 1'b1;
    end else begin
        shift_reg_left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        shift_reg_left_V_ce1 = 1'b1;
    end else begin
        shift_reg_left_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        shift_reg_left_V_d1 = datain_left_V_2_reg_516;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_left_V_d1 = shift_reg_left_V_q0;
    end else begin
        shift_reg_left_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln51_reg_477 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        shift_reg_left_V_we1 = 1'b1;
    end else begin
        shift_reg_left_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        shift_reg_right_V_address0 = zext_ln99_fu_379_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        shift_reg_right_V_address0 = 6'd57;
    end else begin
        shift_reg_right_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        shift_reg_right_V_address1 = 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        shift_reg_right_V_address1 = zext_ln99_1_reg_556;
    end else begin
        shift_reg_right_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((datain_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        shift_reg_right_V_ce0 = 1'b1;
    end else begin
        shift_reg_right_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        shift_reg_right_V_ce1 = 1'b1;
    end else begin
        shift_reg_right_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        shift_reg_right_V_d1 = datain_right_V_2_reg_581;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        shift_reg_right_V_d1 = shift_reg_right_V_q0;
    end else begin
        shift_reg_right_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln98_reg_542 == 1'd0)))) begin
        shift_reg_right_V_we1 = 1'b1;
    end else begin
        shift_reg_right_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln51_fu_254_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln51_fu_254_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((datain_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln98_fu_367_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln98_fu_367_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((datain_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if ((~((dataout_TREADY_int == 1'b0) | (regslice_both_dataout_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_left_V_1_fu_337_p2 = ($signed(trunc_ln51_fu_330_p1) + $signed(sext_ln700_1_fu_334_p1));

assign acc_left_V_2_fu_293_p2 = ($signed(p_0403_0_reg_179) + $signed(sext_ln700_4_fu_290_p1));

assign acc_left_V_fu_245_p0 = reg_229;

assign acc_left_V_fu_245_p2 = ($signed(acc_left_V_fu_245_p0) * $signed(-42'h17A));

assign acc_right_V_1_fu_450_p2 = ($signed(trunc_ln98_fu_443_p1) + $signed(sext_ln700_6_fu_447_p1));

assign acc_right_V_2_fu_406_p2 = ($signed(p_0412_0_reg_200) + $signed(sext_ln700_9_fu_403_p1));

assign acc_right_V_fu_358_p1 = reg_237;

assign acc_right_V_fu_358_p2 = ($signed(42'd4398046510726) * $signed(acc_right_V_fu_358_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign datain_left_V_2_fu_313_p3 = ((tmp_2_fu_299_p3[0:0] === 1'b1) ? datain_left_V_fu_307_p2 : datain_TDATA_int);

assign datain_left_V_fu_307_p2 = (datain_TDATA_int | 32'd4294901760);

assign datain_right_V_2_fu_426_p3 = ((tmp_3_fu_412_p3[0:0] === 1'b1) ? datain_right_V_fu_420_p2 : datain_TDATA_int);

assign datain_right_V_fu_420_p2 = (datain_TDATA_int | 32'd4294901760);

assign dataout_TVALID = regslice_both_dataout_data_V_U_vld_out;

assign i_2_fu_373_p2 = ($signed(ap_phi_mux_i_1_phi_fu_214_p4) + $signed(6'd63));

assign i_fu_260_p2 = ($signed(ap_phi_mux_i_0_phi_fu_193_p4) + $signed(6'd63));

assign icmp_ln51_fu_254_p2 = ((ap_phi_mux_i_0_phi_fu_193_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_367_p2 = ((ap_phi_mux_i_1_phi_fu_214_p4 == 6'd0) ? 1'b1 : 1'b0);

assign mul_ln700_1_fu_324_p1 = datain_left_V_2_reg_516;

assign mul_ln700_1_fu_324_p2 = ($signed(42'd4398046510726) * $signed(mul_ln700_1_fu_324_p1));

assign mul_ln700_2_fu_397_p0 = reg_233;

assign mul_ln700_2_fu_397_p1 = sext_ln700_7_fu_389_p0;

assign mul_ln700_2_fu_397_p2 = ($signed(mul_ln700_2_fu_397_p0) * $signed(mul_ln700_2_fu_397_p1));

assign mul_ln700_3_fu_437_p1 = datain_right_V_2_reg_581;

assign mul_ln700_3_fu_437_p2 = ($signed(42'd4398046510726) * $signed(mul_ln700_3_fu_437_p1));

assign mul_ln700_fu_284_p0 = reg_233;

assign mul_ln700_fu_284_p1 = sext_ln700_2_fu_276_p0;

assign mul_ln700_fu_284_p2 = ($signed(mul_ln700_fu_284_p0) * $signed(mul_ln700_fu_284_p1));

assign sext_ln68_1_fu_251_p1 = $signed(acc_left_V_reg_467);

assign sext_ln68_3_fu_364_p1 = $signed(acc_right_V_reg_532);

assign sext_ln700_1_fu_334_p1 = $signed(mul_ln700_1_reg_522);

assign sext_ln700_2_fu_276_p0 = reg_229;

assign sext_ln700_4_fu_290_p1 = $signed(mul_ln700_reg_501);

assign sext_ln700_6_fu_447_p1 = $signed(mul_ln700_3_reg_587);

assign sext_ln700_7_fu_389_p0 = reg_237;

assign sext_ln700_9_fu_403_p1 = $signed(mul_ln700_2_reg_566);

assign tmp_2_fu_299_p3 = datain_TDATA_int[32'd15];

assign tmp_3_fu_412_p3 = datain_TDATA_int[32'd15];

assign trunc_ln51_fu_330_p1 = p_0403_0_reg_179[46:0];

assign trunc_ln98_fu_443_p1 = p_0412_0_reg_200[46:0];

assign zext_ln58_1_fu_271_p1 = ap_phi_mux_i_0_phi_fu_193_p4;

assign zext_ln58_fu_266_p1 = i_fu_260_p2;

assign zext_ln99_1_fu_384_p1 = ap_phi_mux_i_1_phi_fu_214_p4;

assign zext_ln99_fu_379_p1 = i_2_fu_373_p2;

always @ (posedge ap_clk) begin
    acc_left_V_reg_467[0] <= 1'b0;
    zext_ln58_1_reg_491[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln99_1_reg_556[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //fir_filter
