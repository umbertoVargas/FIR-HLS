// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_filter,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=467,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=12,HLS_SYN_FF=585,HLS_SYN_LUT=823,HLS_VERSION=2019_2}" *)

module fir_filter (
        ap_clk,
        ap_rst_n,
        datain_TDATA,
        datain_TVALID,
        datain_TREADY,
        datain_TLAST,
        dataout_TDATA,
        dataout_TVALID,
        dataout_TREADY,
        dataout_TLAST
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst_n;
input  [31:0] datain_TDATA;
input   datain_TVALID;
output   datain_TREADY;
input  [0:0] datain_TLAST;
output  [31:0] dataout_TDATA;
output   dataout_TVALID;
input   dataout_TREADY;
output  [0:0] dataout_TLAST;

reg datain_TREADY;

 reg    ap_rst_n_inv;
reg   [5:0] shift_reg_left_V_address0;
reg    shift_reg_left_V_ce0;
reg    shift_reg_left_V_we0;
reg   [31:0] shift_reg_left_V_d0;
wire   [31:0] shift_reg_left_V_q0;
reg   [5:0] c_address0;
reg    c_ce0;
wire   [15:0] c_q0;
reg   [5:0] shift_reg_right_V_address0;
reg    shift_reg_right_V_ce0;
reg    shift_reg_right_V_we0;
reg   [31:0] shift_reg_right_V_d0;
wire   [31:0] shift_reg_right_V_q0;
reg    datain_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln45_fu_238_p2;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln73_fu_351_p2;
reg    dataout_TDATA_blk_n;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
reg   [31:0] reg_213;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state6;
reg   [15:0] reg_217;
wire    ap_CS_fsm_state13;
reg   [31:0] reg_221;
wire    ap_CS_fsm_state9;
wire   [41:0] acc_left_V_fu_229_p2;
reg   [41:0] acc_left_V_reg_451;
wire    ap_CS_fsm_state3;
wire  signed [52:0] sext_ln68_1_fu_235_p1;
wire    ap_CS_fsm_state4;
wire   [5:0] i_fu_244_p2;
reg   [5:0] i_reg_464;
reg    ap_block_state5;
wire   [63:0] zext_ln46_1_fu_255_p1;
reg   [63:0] zext_ln46_1_reg_474;
reg   [0:0] datain_last_V_val_reg_484;
wire  signed [31:0] datain_left_V_2_fu_274_p3;
reg  signed [31:0] datain_left_V_2_reg_489;
wire   [47:0] mul_ln700_fu_290_p2;
reg   [47:0] mul_ln700_reg_495;
wire    ap_CS_fsm_state7;
wire   [52:0] acc_left_V_2_fu_299_p2;
wire    ap_CS_fsm_state8;
wire   [41:0] mul_ln700_1_fu_308_p2;
reg   [41:0] mul_ln700_1_reg_505;
wire   [41:0] acc_right_V_fu_342_p2;
reg   [41:0] acc_right_V_reg_515;
wire  signed [52:0] sext_ln68_3_fu_348_p1;
wire   [5:0] i_2_fu_357_p2;
reg   [5:0] i_2_reg_528;
reg    ap_block_state12;
wire   [63:0] zext_ln74_1_fu_368_p1;
reg   [63:0] zext_ln74_1_reg_538;
reg   [0:0] datain_last_V_val8_reg_548;
wire  signed [31:0] datain_right_V_2_fu_387_p3;
reg  signed [31:0] datain_right_V_2_reg_553;
wire   [47:0] mul_ln700_2_fu_403_p2;
reg   [47:0] mul_ln700_2_reg_559;
wire    ap_CS_fsm_state14;
wire   [52:0] acc_right_V_2_fu_412_p2;
wire    ap_CS_fsm_state15;
wire   [41:0] mul_ln700_3_fu_421_p2;
reg   [41:0] mul_ln700_3_reg_569;
wire    ap_CS_fsm_state16;
reg   [52:0] p_0403_0_reg_163;
reg   [5:0] i_0_reg_173;
reg   [52:0] p_0412_0_reg_184;
reg   [5:0] i_1_reg_194;
wire   [63:0] zext_ln46_fu_250_p1;
wire   [63:0] zext_ln74_fu_363_p1;
wire    ap_CS_fsm_state1;
wire  signed [31:0] acc_left_V_fu_229_p0;
wire   [0:0] tmp_fu_260_p3;
wire   [31:0] datain_left_V_fu_268_p2;
wire  signed [31:0] sext_ln700_2_fu_282_p0;
wire  signed [15:0] mul_ln700_fu_290_p0;
wire  signed [31:0] mul_ln700_fu_290_p1;
wire  signed [52:0] sext_ln700_4_fu_296_p1;
wire  signed [31:0] mul_ln700_1_fu_308_p1;
wire   [46:0] trunc_ln45_fu_314_p1;
wire  signed [46:0] sext_ln700_1_fu_318_p1;
wire   [46:0] acc_left_V_1_fu_321_p2;
wire  signed [31:0] acc_right_V_fu_342_p1;
wire   [0:0] tmp_1_fu_373_p3;
wire   [31:0] datain_right_V_fu_381_p2;
wire  signed [31:0] sext_ln700_7_fu_395_p0;
wire  signed [15:0] mul_ln700_2_fu_403_p0;
wire  signed [31:0] mul_ln700_2_fu_403_p1;
wire  signed [52:0] sext_ln700_9_fu_409_p1;
wire  signed [31:0] mul_ln700_3_fu_421_p1;
wire   [46:0] trunc_ln73_fu_427_p1;
wire  signed [46:0] sext_ln700_6_fu_431_p1;
wire   [46:0] acc_right_V_1_fu_434_p2;
reg   [17:0] ap_NS_fsm;
wire    regslice_both_dataout_data_V_U_apdone_blk;
wire    regslice_both_datain_data_V_U_apdone_blk;
wire   [31:0] datain_TDATA_int;
wire    datain_TVALID_int;
reg    datain_TREADY_int;
wire    regslice_both_datain_data_V_U_ack_in;
wire    regslice_both_datain_last_V_U_apdone_blk;
wire   [0:0] datain_TLAST_int;
wire    regslice_both_datain_last_V_U_vld_out;
wire    regslice_both_datain_last_V_U_ack_in;
reg   [31:0] dataout_TDATA_int;
reg    dataout_TVALID_int;
wire    dataout_TREADY_int;
wire    regslice_both_dataout_data_V_U_vld_out;
wire    regslice_both_dataout_last_V_U_apdone_blk;
reg   [0:0] dataout_TLAST_int;
wire    regslice_both_dataout_last_V_U_ack_in_dummy;
wire    regslice_both_dataout_last_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

fir_filter_shift_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 58 ),
    .AddressWidth( 6 ))
shift_reg_left_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(shift_reg_left_V_address0),
    .ce0(shift_reg_left_V_ce0),
    .we0(shift_reg_left_V_we0),
    .d0(shift_reg_left_V_d0),
    .q0(shift_reg_left_V_q0)
);

fir_filter_c #(
    .DataWidth( 16 ),
    .AddressRange( 59 ),
    .AddressWidth( 6 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0)
);

fir_filter_shift_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 58 ),
    .AddressWidth( 6 ))
shift_reg_right_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(shift_reg_right_V_address0),
    .ce0(shift_reg_right_V_ce0),
    .we0(shift_reg_right_V_we0),
    .d0(shift_reg_right_V_d0),
    .q0(shift_reg_right_V_q0)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_datain_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(datain_TDATA),
    .vld_in(datain_TVALID),
    .ack_in(regslice_both_datain_data_V_U_ack_in),
    .data_out(datain_TDATA_int),
    .vld_out(datain_TVALID_int),
    .ack_out(datain_TREADY_int),
    .apdone_blk(regslice_both_datain_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_datain_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(datain_TLAST),
    .vld_in(datain_TVALID),
    .ack_in(regslice_both_datain_last_V_U_ack_in),
    .data_out(datain_TLAST_int),
    .vld_out(regslice_both_datain_last_V_U_vld_out),
    .ack_out(datain_TREADY_int),
    .apdone_blk(regslice_both_datain_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_dataout_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dataout_TDATA_int),
    .vld_in(dataout_TVALID_int),
    .ack_in(dataout_TREADY_int),
    .data_out(dataout_TDATA),
    .vld_out(regslice_both_dataout_data_V_U_vld_out),
    .ack_out(dataout_TREADY),
    .apdone_blk(regslice_both_dataout_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_dataout_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dataout_TLAST_int),
    .vld_in(dataout_TVALID_int),
    .ack_in(regslice_both_dataout_last_V_U_ack_in_dummy),
    .data_out(dataout_TLAST),
    .vld_out(regslice_both_dataout_last_V_U_vld_out),
    .ack_out(dataout_TREADY),
    .apdone_blk(regslice_both_dataout_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_reg_173 <= i_reg_464;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_173 <= 6'd57;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_1_reg_194 <= i_2_reg_528;
    end else if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_1_reg_194 <= 6'd57;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_0403_0_reg_163 <= acc_left_V_2_fu_299_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_0403_0_reg_163 <= sext_ln68_1_fu_235_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_0412_0_reg_184 <= acc_right_V_2_fu_412_p2;
    end else if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        p_0412_0_reg_184 <= sext_ln68_3_fu_348_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_left_V_reg_451[41 : 1] <= acc_left_V_fu_229_p2[41 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        acc_right_V_reg_515 <= acc_right_V_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln73_fu_351_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (icmp_ln73_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        datain_last_V_val8_reg_548 <= datain_TLAST_int;
        datain_right_V_2_reg_553 <= datain_right_V_2_fu_387_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln45_fu_238_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (icmp_ln45_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        datain_last_V_val_reg_484 <= datain_TLAST_int;
        datain_left_V_2_reg_489 <= datain_left_V_2_fu_274_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln73_fu_351_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (icmp_ln73_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        i_2_reg_528 <= i_2_fu_357_p2;
        zext_ln74_1_reg_538[5 : 0] <= zext_ln74_1_fu_368_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln45_fu_238_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (icmp_ln45_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_464 <= i_fu_244_p2;
        zext_ln46_1_reg_474[5 : 0] <= zext_ln46_1_fu_255_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln700_1_reg_505 <= mul_ln700_1_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul_ln700_2_reg_559 <= mul_ln700_2_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mul_ln700_3_reg_569 <= mul_ln700_3_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln700_reg_495 <= mul_ln700_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_213 <= shift_reg_left_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_217 <= c_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_221 <= shift_reg_right_V_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        c_address0 = zext_ln74_1_fu_368_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        c_address0 = zext_ln46_1_fu_255_p1;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln73_fu_351_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state12)) | (~((icmp_ln45_fu_238_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln73_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)) | ((icmp_ln45_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        datain_TDATA_blk_n = datain_TVALID_int;
    end else begin
        datain_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_datain_data_V_U_ack_in == 1'b1) & (datain_TVALID == 1'b1))) begin
        datain_TREADY = 1'b1;
    end else begin
        datain_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln73_fu_351_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (icmp_ln73_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)) | (~((icmp_ln45_fu_238_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (icmp_ln45_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        datain_TREADY_int = 1'b1;
    end else begin
        datain_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18))) begin
        dataout_TDATA_blk_n = dataout_TREADY_int;
    end else begin
        dataout_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        dataout_TDATA_int = {{acc_right_V_1_fu_434_p2[46:15]}};
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dataout_TDATA_int = {{acc_left_V_1_fu_321_p2[46:15]}};
    end else begin
        dataout_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        dataout_TLAST_int = datain_last_V_val8_reg_548;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dataout_TLAST_int = datain_last_V_val_reg_484;
    end else begin
        dataout_TLAST_int = 'bx;
    end
end

always @ (*) begin
    if ((((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        dataout_TVALID_int = 1'b1;
    end else begin
        dataout_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        shift_reg_left_V_address0 = 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_left_V_address0 = zext_ln46_1_reg_474;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_left_V_address0 = zext_ln46_fu_250_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shift_reg_left_V_address0 = 6'd57;
    end else begin
        shift_reg_left_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (~((icmp_ln45_fu_238_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        shift_reg_left_V_ce0 = 1'b1;
    end else begin
        shift_reg_left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        shift_reg_left_V_d0 = datain_left_V_2_reg_489;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_left_V_d0 = shift_reg_left_V_q0;
    end else begin
        shift_reg_left_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        shift_reg_left_V_we0 = 1'b1;
    end else begin
        shift_reg_left_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        shift_reg_right_V_address0 = 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        shift_reg_right_V_address0 = zext_ln74_1_reg_538;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        shift_reg_right_V_address0 = zext_ln74_fu_363_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_right_V_address0 = 6'd57;
    end else begin
        shift_reg_right_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state13) | (~((icmp_ln73_fu_351_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state12)) | (~((icmp_ln45_fu_238_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        shift_reg_right_V_ce0 = 1'b1;
    end else begin
        shift_reg_right_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        shift_reg_right_V_d0 = datain_right_V_2_reg_553;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        shift_reg_right_V_d0 = shift_reg_right_V_q0;
    end else begin
        shift_reg_right_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state13))) begin
        shift_reg_right_V_we0 = 1'b1;
    end else begin
        shift_reg_right_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~((icmp_ln45_fu_238_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (icmp_ln45_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((icmp_ln45_fu_238_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (icmp_ln45_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if ((~((icmp_ln73_fu_351_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (icmp_ln73_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if ((~((icmp_ln73_fu_351_p2 == 1'd1) & (datain_TVALID_int == 1'b0)) & (icmp_ln73_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((dataout_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if ((~((dataout_TREADY_int == 1'b0) | (regslice_both_dataout_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_left_V_1_fu_321_p2 = ($signed(trunc_ln45_fu_314_p1) + $signed(sext_ln700_1_fu_318_p1));

assign acc_left_V_2_fu_299_p2 = ($signed(p_0403_0_reg_163) + $signed(sext_ln700_4_fu_296_p1));

assign acc_left_V_fu_229_p0 = reg_213;

assign acc_left_V_fu_229_p2 = ($signed(acc_left_V_fu_229_p0) * $signed(-42'h17A));

assign acc_right_V_1_fu_434_p2 = ($signed(trunc_ln73_fu_427_p1) + $signed(sext_ln700_6_fu_431_p1));

assign acc_right_V_2_fu_412_p2 = ($signed(p_0412_0_reg_184) + $signed(sext_ln700_9_fu_409_p1));

assign acc_right_V_fu_342_p1 = reg_221;

assign acc_right_V_fu_342_p2 = ($signed(42'd4398046510726) * $signed(acc_right_V_fu_342_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state12 = ((icmp_ln73_fu_351_p2 == 1'd1) & (datain_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((icmp_ln45_fu_238_p2 == 1'd1) & (datain_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign datain_left_V_2_fu_274_p3 = ((tmp_fu_260_p3[0:0] === 1'b1) ? datain_left_V_fu_268_p2 : datain_TDATA_int);

assign datain_left_V_fu_268_p2 = (datain_TDATA_int | 32'd4294901760);

assign datain_right_V_2_fu_387_p3 = ((tmp_1_fu_373_p3[0:0] === 1'b1) ? datain_right_V_fu_381_p2 : datain_TDATA_int);

assign datain_right_V_fu_381_p2 = (datain_TDATA_int | 32'd4294901760);

assign dataout_TVALID = regslice_both_dataout_data_V_U_vld_out;

assign i_2_fu_357_p2 = ($signed(i_1_reg_194) + $signed(6'd63));

assign i_fu_244_p2 = ($signed(i_0_reg_173) + $signed(6'd63));

assign icmp_ln45_fu_238_p2 = ((i_0_reg_173 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_351_p2 = ((i_1_reg_194 == 6'd0) ? 1'b1 : 1'b0);

assign mul_ln700_1_fu_308_p1 = datain_left_V_2_reg_489;

assign mul_ln700_1_fu_308_p2 = ($signed(42'd4398046510726) * $signed(mul_ln700_1_fu_308_p1));

assign mul_ln700_2_fu_403_p0 = reg_217;

assign mul_ln700_2_fu_403_p1 = sext_ln700_7_fu_395_p0;

assign mul_ln700_2_fu_403_p2 = ($signed(mul_ln700_2_fu_403_p0) * $signed(mul_ln700_2_fu_403_p1));

assign mul_ln700_3_fu_421_p1 = datain_right_V_2_reg_553;

assign mul_ln700_3_fu_421_p2 = ($signed(42'd4398046510726) * $signed(mul_ln700_3_fu_421_p1));

assign mul_ln700_fu_290_p0 = reg_217;

assign mul_ln700_fu_290_p1 = sext_ln700_2_fu_282_p0;

assign mul_ln700_fu_290_p2 = ($signed(mul_ln700_fu_290_p0) * $signed(mul_ln700_fu_290_p1));

assign sext_ln68_1_fu_235_p1 = $signed(acc_left_V_reg_451);

assign sext_ln68_3_fu_348_p1 = $signed(acc_right_V_reg_515);

assign sext_ln700_1_fu_318_p1 = $signed(mul_ln700_1_reg_505);

assign sext_ln700_2_fu_282_p0 = reg_213;

assign sext_ln700_4_fu_296_p1 = $signed(mul_ln700_reg_495);

assign sext_ln700_6_fu_431_p1 = $signed(mul_ln700_3_reg_569);

assign sext_ln700_7_fu_395_p0 = reg_221;

assign sext_ln700_9_fu_409_p1 = $signed(mul_ln700_2_reg_559);

assign tmp_1_fu_373_p3 = datain_TDATA_int[32'd15];

assign tmp_fu_260_p3 = datain_TDATA_int[32'd15];

assign trunc_ln45_fu_314_p1 = p_0403_0_reg_163[46:0];

assign trunc_ln73_fu_427_p1 = p_0412_0_reg_184[46:0];

assign zext_ln46_1_fu_255_p1 = i_0_reg_173;

assign zext_ln46_fu_250_p1 = i_fu_244_p2;

assign zext_ln74_1_fu_368_p1 = i_1_reg_194;

assign zext_ln74_fu_363_p1 = i_2_fu_357_p2;

always @ (posedge ap_clk) begin
    acc_left_V_reg_451[0] <= 1'b0;
    zext_ln46_1_reg_474[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln74_1_reg_538[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //fir_filter
