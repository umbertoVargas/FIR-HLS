-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    datain_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    datain_TVALID : IN STD_LOGIC;
    datain_TREADY : OUT STD_LOGIC;
    datain_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    dataout_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dataout_TVALID : OUT STD_LOGIC;
    dataout_TREADY : IN STD_LOGIC;
    dataout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of fir_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_filter,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=467,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=12,HLS_SYN_FF=585,HLS_SYN_LUT=823,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv42_3FFFFFFFE86 : STD_LOGIC_VECTOR (41 downto 0) := "111111111111111111111111111111111010000110";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_FFFF0000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111110000000000000000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal shift_reg_left_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_reg_left_V_ce0 : STD_LOGIC;
    signal shift_reg_left_V_we0 : STD_LOGIC;
    signal shift_reg_left_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_left_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shift_reg_right_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_reg_right_V_ce0 : STD_LOGIC;
    signal shift_reg_right_V_we0 : STD_LOGIC;
    signal shift_reg_right_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_right_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal datain_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln45_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln73_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dataout_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal reg_217 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal acc_left_V_fu_229_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal acc_left_V_reg_451 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln68_1_fu_235_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_244_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_464 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal zext_ln46_1_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_1_reg_474 : STD_LOGIC_VECTOR (63 downto 0);
    signal datain_last_V_val_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal datain_left_V_2_fu_274_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal datain_left_V_2_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_fu_290_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln700_reg_495 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal acc_left_V_2_fu_299_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal mul_ln700_1_fu_308_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal mul_ln700_1_reg_505 : STD_LOGIC_VECTOR (41 downto 0);
    signal acc_right_V_fu_342_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal acc_right_V_reg_515 : STD_LOGIC_VECTOR (41 downto 0);
    signal sext_ln68_3_fu_348_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal i_2_fu_357_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_528 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state12 : BOOLEAN;
    signal zext_ln74_1_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_1_reg_538 : STD_LOGIC_VECTOR (63 downto 0);
    signal datain_last_V_val8_reg_548 : STD_LOGIC_VECTOR (0 downto 0);
    signal datain_right_V_2_fu_387_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal datain_right_V_2_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_2_fu_403_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln700_2_reg_559 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal acc_right_V_2_fu_412_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal mul_ln700_3_fu_421_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal mul_ln700_3_reg_569 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_0403_0_reg_163 : STD_LOGIC_VECTOR (52 downto 0);
    signal i_0_reg_173 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_0412_0_reg_184 : STD_LOGIC_VECTOR (52 downto 0);
    signal i_1_reg_194 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln46_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal acc_left_V_fu_229_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_260_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal datain_left_V_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln700_2_fu_282_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_fu_290_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln700_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln700_4_fu_296_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal mul_ln700_1_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln45_fu_314_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln700_1_fu_318_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal acc_left_V_1_fu_321_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal acc_right_V_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal datain_right_V_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln700_7_fu_395_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_2_fu_403_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln700_2_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln700_9_fu_409_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal mul_ln700_3_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln73_fu_427_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln700_6_fu_431_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal acc_right_V_1_fu_434_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal regslice_both_dataout_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_datain_data_V_U_apdone_blk : STD_LOGIC;
    signal datain_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal datain_TVALID_int : STD_LOGIC;
    signal datain_TREADY_int : STD_LOGIC;
    signal regslice_both_datain_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_datain_last_V_U_apdone_blk : STD_LOGIC;
    signal datain_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_datain_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_datain_last_V_U_ack_in : STD_LOGIC;
    signal dataout_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal dataout_TVALID_int : STD_LOGIC;
    signal dataout_TREADY_int : STD_LOGIC;
    signal regslice_both_dataout_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dataout_last_V_U_apdone_blk : STD_LOGIC;
    signal dataout_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_dataout_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dataout_last_V_U_vld_out : STD_LOGIC;

    component fir_filter_shift_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_filter_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    shift_reg_left_V_U : component fir_filter_shift_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 58,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => shift_reg_left_V_address0,
        ce0 => shift_reg_left_V_ce0,
        we0 => shift_reg_left_V_we0,
        d0 => shift_reg_left_V_d0,
        q0 => shift_reg_left_V_q0);

    c_U : component fir_filter_c
    generic map (
        DataWidth => 16,
        AddressRange => 59,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_address0,
        ce0 => c_ce0,
        q0 => c_q0);

    shift_reg_right_V_U : component fir_filter_shift_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 58,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => shift_reg_right_V_address0,
        ce0 => shift_reg_right_V_ce0,
        we0 => shift_reg_right_V_we0,
        d0 => shift_reg_right_V_d0,
        q0 => shift_reg_right_V_q0);

    regslice_both_datain_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => datain_TDATA,
        vld_in => datain_TVALID,
        ack_in => regslice_both_datain_data_V_U_ack_in,
        data_out => datain_TDATA_int,
        vld_out => datain_TVALID_int,
        ack_out => datain_TREADY_int,
        apdone_blk => regslice_both_datain_data_V_U_apdone_blk);

    regslice_both_datain_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => datain_TLAST,
        vld_in => datain_TVALID,
        ack_in => regslice_both_datain_last_V_U_ack_in,
        data_out => datain_TLAST_int,
        vld_out => regslice_both_datain_last_V_U_vld_out,
        ack_out => datain_TREADY_int,
        apdone_blk => regslice_both_datain_last_V_U_apdone_blk);

    regslice_both_dataout_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dataout_TDATA_int,
        vld_in => dataout_TVALID_int,
        ack_in => dataout_TREADY_int,
        data_out => dataout_TDATA,
        vld_out => regslice_both_dataout_data_V_U_vld_out,
        ack_out => dataout_TREADY,
        apdone_blk => regslice_both_dataout_data_V_U_apdone_blk);

    regslice_both_dataout_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dataout_TLAST_int,
        vld_in => dataout_TVALID_int,
        ack_in => regslice_both_dataout_last_V_U_ack_in_dummy,
        data_out => dataout_TLAST,
        vld_out => regslice_both_dataout_last_V_U_vld_out,
        ack_out => dataout_TREADY,
        apdone_blk => regslice_both_dataout_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_reg_173 <= i_reg_464;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_173 <= ap_const_lv6_39;
            end if; 
        end if;
    end process;

    i_1_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_1_reg_194 <= i_2_reg_528;
            elsif (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_1_reg_194 <= ap_const_lv6_39;
            end if; 
        end if;
    end process;

    p_0403_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_0403_0_reg_163 <= acc_left_V_2_fu_299_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_0403_0_reg_163 <= sext_ln68_1_fu_235_p1;
            end if; 
        end if;
    end process;

    p_0412_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p_0412_0_reg_184 <= acc_right_V_2_fu_412_p2;
            elsif (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                p_0412_0_reg_184 <= sext_ln68_3_fu_348_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    acc_left_V_reg_451(41 downto 1) <= acc_left_V_fu_229_p2(41 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                acc_right_V_reg_515 <= acc_right_V_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                datain_last_V_val8_reg_548 <= datain_TLAST_int;
                datain_right_V_2_reg_553 <= datain_right_V_2_fu_387_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                datain_last_V_val_reg_484 <= datain_TLAST_int;
                datain_left_V_2_reg_489 <= datain_left_V_2_fu_274_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (icmp_ln73_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                i_2_reg_528 <= i_2_fu_357_p2;
                    zext_ln74_1_reg_538(5 downto 0) <= zext_ln74_1_fu_368_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (icmp_ln45_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                i_reg_464 <= i_fu_244_p2;
                    zext_ln46_1_reg_474(5 downto 0) <= zext_ln46_1_fu_255_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                mul_ln700_1_reg_505 <= mul_ln700_1_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                mul_ln700_2_reg_559 <= mul_ln700_2_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                mul_ln700_3_reg_569 <= mul_ln700_3_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln700_reg_495 <= mul_ln700_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_213 <= shift_reg_left_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_217 <= c_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_221 <= shift_reg_right_V_q0;
            end if;
        end if;
    end process;
    acc_left_V_reg_451(0) <= '0';
    zext_ln46_1_reg_474(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln74_1_reg_538(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state5, icmp_ln45_fu_238_p2, ap_CS_fsm_state12, icmp_ln73_fu_351_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state18, regslice_both_dataout_data_V_U_apdone_blk, datain_TVALID_int, dataout_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if ((not(((icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif ((not(((icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (icmp_ln45_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif ((not(((icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (icmp_ln73_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((dataout_TREADY_int = ap_const_logic_0) or (regslice_both_dataout_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    acc_left_V_1_fu_321_p2 <= std_logic_vector(unsigned(trunc_ln45_fu_314_p1) + unsigned(sext_ln700_1_fu_318_p1));
    acc_left_V_2_fu_299_p2 <= std_logic_vector(unsigned(p_0403_0_reg_163) + unsigned(sext_ln700_4_fu_296_p1));
    acc_left_V_fu_229_p0 <= reg_213;
    acc_left_V_fu_229_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(acc_left_V_fu_229_p0) * signed(ap_const_lv42_3FFFFFFFE86))), 42));
    acc_right_V_1_fu_434_p2 <= std_logic_vector(unsigned(trunc_ln73_fu_427_p1) + unsigned(sext_ln700_6_fu_431_p1));
    acc_right_V_2_fu_412_p2 <= std_logic_vector(unsigned(p_0412_0_reg_184) + unsigned(sext_ln700_9_fu_409_p1));
    acc_right_V_fu_342_p1 <= reg_221;
    acc_right_V_fu_342_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv42_3FFFFFFFE86) * signed(acc_right_V_fu_342_p1))), 42));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state12_assign_proc : process(icmp_ln73_fu_351_p2, datain_TVALID_int)
    begin
                ap_block_state12 <= ((icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(icmp_ln45_fu_238_p2, datain_TVALID_int)
    begin
                ap_block_state5 <= ((icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, zext_ln46_1_fu_255_p1, zext_ln74_1_fu_368_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c_address0 <= zext_ln74_1_fu_368_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_address0 <= zext_ln46_1_fu_255_p1(6 - 1 downto 0);
        else 
            c_address0 <= "XXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state5, icmp_ln45_fu_238_p2, ap_CS_fsm_state12, icmp_ln73_fu_351_p2, datain_TVALID_int)
    begin
        if (((not(((icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    datain_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state5, icmp_ln45_fu_238_p2, ap_CS_fsm_state12, icmp_ln73_fu_351_p2, datain_TVALID_int)
    begin
        if ((((icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            datain_TDATA_blk_n <= datain_TVALID_int;
        else 
            datain_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    datain_TREADY_assign_proc : process(datain_TVALID, regslice_both_datain_data_V_U_ack_in)
    begin
        if (((regslice_both_datain_data_V_U_ack_in = ap_const_logic_1) and (datain_TVALID = ap_const_logic_1))) then 
            datain_TREADY <= ap_const_logic_1;
        else 
            datain_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    datain_TREADY_int_assign_proc : process(ap_CS_fsm_state5, icmp_ln45_fu_238_p2, ap_CS_fsm_state12, icmp_ln73_fu_351_p2, datain_TVALID_int)
    begin
        if (((not(((icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            datain_TREADY_int <= ap_const_logic_1;
        else 
            datain_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    datain_left_V_2_fu_274_p3 <= 
        datain_left_V_fu_268_p2 when (tmp_fu_260_p3(0) = '1') else 
        datain_TDATA_int;
    datain_left_V_fu_268_p2 <= (datain_TDATA_int or ap_const_lv32_FFFF0000);
    datain_right_V_2_fu_387_p3 <= 
        datain_right_V_fu_381_p2 when (tmp_1_fu_373_p3(0) = '1') else 
        datain_TDATA_int;
    datain_right_V_fu_381_p2 <= (datain_TDATA_int or ap_const_lv32_FFFF0000);

    dataout_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state17, ap_CS_fsm_state18, dataout_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            dataout_TDATA_blk_n <= dataout_TREADY_int;
        else 
            dataout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dataout_TDATA_int_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state17, acc_left_V_1_fu_321_p2, acc_right_V_1_fu_434_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dataout_TDATA_int <= acc_right_V_1_fu_434_p2(46 downto 15);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataout_TDATA_int <= acc_left_V_1_fu_321_p2(46 downto 15);
        else 
            dataout_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dataout_TLAST_int_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state17, datain_last_V_val_reg_484, datain_last_V_val8_reg_548)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dataout_TLAST_int <= datain_last_V_val8_reg_548;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dataout_TLAST_int <= datain_last_V_val_reg_484;
        else 
            dataout_TLAST_int <= "X";
        end if; 
    end process;

    dataout_TVALID <= regslice_both_dataout_data_V_U_vld_out;

    dataout_TVALID_int_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state17, dataout_TREADY_int)
    begin
        if ((((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((dataout_TREADY_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            dataout_TVALID_int <= ap_const_logic_1;
        else 
            dataout_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_357_p2 <= std_logic_vector(unsigned(i_1_reg_194) + unsigned(ap_const_lv6_3F));
    i_fu_244_p2 <= std_logic_vector(unsigned(i_0_reg_173) + unsigned(ap_const_lv6_3F));
    icmp_ln45_fu_238_p2 <= "1" when (i_0_reg_173 = ap_const_lv6_0) else "0";
    icmp_ln73_fu_351_p2 <= "1" when (i_1_reg_194 = ap_const_lv6_0) else "0";
    mul_ln700_1_fu_308_p1 <= datain_left_V_2_reg_489;
    mul_ln700_1_fu_308_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv42_3FFFFFFFE86) * signed(mul_ln700_1_fu_308_p1))), 42));
    mul_ln700_2_fu_403_p0 <= reg_217;
    mul_ln700_2_fu_403_p1 <= sext_ln700_7_fu_395_p0;
    mul_ln700_2_fu_403_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_2_fu_403_p0) * signed(mul_ln700_2_fu_403_p1))), 48));
    mul_ln700_3_fu_421_p1 <= datain_right_V_2_reg_553;
    mul_ln700_3_fu_421_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv42_3FFFFFFFE86) * signed(mul_ln700_3_fu_421_p1))), 42));
    mul_ln700_fu_290_p0 <= reg_217;
    mul_ln700_fu_290_p1 <= sext_ln700_2_fu_282_p0;
    mul_ln700_fu_290_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_fu_290_p0) * signed(mul_ln700_fu_290_p1))), 48));
        sext_ln68_1_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_left_V_reg_451),53));

        sext_ln68_3_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_right_V_reg_515),53));

        sext_ln700_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln700_1_reg_505),47));

    sext_ln700_2_fu_282_p0 <= reg_213;
        sext_ln700_4_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln700_reg_495),53));

        sext_ln700_6_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln700_3_reg_569),47));

    sext_ln700_7_fu_395_p0 <= reg_221;
        sext_ln700_9_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln700_2_reg_559),53));


    shift_reg_left_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, zext_ln46_1_reg_474, zext_ln46_fu_250_p1, ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            shift_reg_left_V_address0 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shift_reg_left_V_address0 <= zext_ln46_1_reg_474(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_left_V_address0 <= zext_ln46_fu_250_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            shift_reg_left_V_address0 <= ap_const_lv6_39;
        else 
            shift_reg_left_V_address0 <= "XXXXXX";
        end if; 
    end process;


    shift_reg_left_V_ce0_assign_proc : process(ap_CS_fsm_state5, icmp_ln45_fu_238_p2, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state1, datain_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (not(((icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            shift_reg_left_V_ce0 <= ap_const_logic_1;
        else 
            shift_reg_left_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_left_V_d0_assign_proc : process(shift_reg_left_V_q0, ap_CS_fsm_state6, ap_CS_fsm_state9, datain_left_V_2_reg_489)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            shift_reg_left_V_d0 <= datain_left_V_2_reg_489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shift_reg_left_V_d0 <= shift_reg_left_V_q0;
        else 
            shift_reg_left_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_left_V_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            shift_reg_left_V_we0 <= ap_const_logic_1;
        else 
            shift_reg_left_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_right_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state13, zext_ln74_1_reg_538, ap_CS_fsm_state16, zext_ln74_fu_363_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shift_reg_right_V_address0 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            shift_reg_right_V_address0 <= zext_ln74_1_reg_538(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            shift_reg_right_V_address0 <= zext_ln74_fu_363_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            shift_reg_right_V_address0 <= ap_const_lv6_39;
        else 
            shift_reg_right_V_address0 <= "XXXXXX";
        end if; 
    end process;


    shift_reg_right_V_ce0_assign_proc : process(ap_CS_fsm_state5, icmp_ln45_fu_238_p2, ap_CS_fsm_state12, icmp_ln73_fu_351_p2, ap_CS_fsm_state13, ap_CS_fsm_state16, datain_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (not(((icmp_ln73_fu_351_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((icmp_ln45_fu_238_p2 = ap_const_lv1_1) and (datain_TVALID_int = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            shift_reg_right_V_ce0 <= ap_const_logic_1;
        else 
            shift_reg_right_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shift_reg_right_V_d0_assign_proc : process(shift_reg_right_V_q0, ap_CS_fsm_state13, datain_right_V_2_reg_553, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shift_reg_right_V_d0 <= datain_right_V_2_reg_553;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            shift_reg_right_V_d0 <= shift_reg_right_V_q0;
        else 
            shift_reg_right_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shift_reg_right_V_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            shift_reg_right_V_we0 <= ap_const_logic_1;
        else 
            shift_reg_right_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_373_p3 <= datain_TDATA_int(15 downto 15);
    tmp_fu_260_p3 <= datain_TDATA_int(15 downto 15);
    trunc_ln45_fu_314_p1 <= p_0403_0_reg_163(47 - 1 downto 0);
    trunc_ln73_fu_427_p1 <= p_0412_0_reg_184(47 - 1 downto 0);
    zext_ln46_1_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_173),64));
    zext_ln46_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_244_p2),64));
    zext_ln74_1_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_194),64));
    zext_ln74_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_357_p2),64));
end behav;
